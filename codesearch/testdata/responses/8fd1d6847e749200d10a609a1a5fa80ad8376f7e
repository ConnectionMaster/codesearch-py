{"file_info_response":[{"return_code":1,"file_info":{"name":"src/out/Debug/gen/third_party/WebKit/public/platform/modules/background_sync/background_sync.mojom-blink.h","lines":"474","size":"18426","language":"c++","type":1,"md5":"dceaa88dd3642e7aa4409a1d499f4c3d","changelist_num":"eb796713090398ab3d173a0c23df390e0d740050","mime_type":"text/plain","generated":true,"package_name":"chromium","content":{"text":"// Copyright 2013 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n#ifndef THIRD_PARTY_WEBKIT_PUBLIC_PLATFORM_MODULES_BACKGROUND_SYNC_BACKGROUND_SYNC_MOJOM_BLINK_H_\n#define THIRD_PARTY_WEBKIT_PUBLIC_PLATFORM_MODULES_BACKGROUND_SYNC_BACKGROUND_SYNC_MOJOM_BLINK_H_\n\n#include \u003cstdint.h\u003e\n\n#include \u003climits\u003e\n#include \u003ctype_traits\u003e\n#include \u003cutility\u003e\n\n#include \"base/callback.h\"\n#include \"base/macros.h\"\n#include \"base/optional.h\"\n#include \"mojo/public/cpp/bindings/associated_interface_ptr.h\"\n#include \"mojo/public/cpp/bindings/associated_interface_ptr_info.h\"\n#include \"mojo/public/cpp/bindings/associated_interface_request.h\"\n#include \"mojo/public/cpp/bindings/clone_traits.h\"\n#include \"mojo/public/cpp/bindings/equals_traits.h\"\n#include \"mojo/public/cpp/bindings/interface_ptr.h\"\n#include \"mojo/public/cpp/bindings/interface_request.h\"\n#include \"mojo/public/cpp/bindings/lib/control_message_handler.h\"\n#include \"mojo/public/cpp/bindings/lib/control_message_proxy.h\"\n#include \"mojo/public/cpp/bindings/lib/serialization.h\"\n#include \"mojo/public/cpp/bindings/native_struct.h\"\n#include \"mojo/public/cpp/bindings/raw_ptr_impl_ref_traits.h\"\n#include \"mojo/public/cpp/bindings/struct_ptr.h\"\n#include \"mojo/public/cpp/bindings/struct_traits.h\"\n#include \"mojo/public/cpp/bindings/thread_safe_interface_ptr.h\"\n#include \"mojo/public/cpp/bindings/union_traits.h\"\n#include \"third_party/WebKit/public/platform/modules/background_sync/background_sync.mojom-shared.h\"\n\n#include \"mojo/public/cpp/bindings/lib/wtf_hash_util.h\"\n#include \"third_party/WebKit/Source/platform/wtf/HashFunctions.h\"\n#include \"third_party/WebKit/Source/platform/wtf/Optional.h\"\n#include \"third_party/WebKit/Source/platform/wtf/text/WTFString.h\"\n#include \"third_party/WebKit/public/platform/WebCommon.h\"\n\n\nnamespace WTF {\nstruct blink_mojom_internal_BackgroundSyncNetworkState_DataHashFn {\n  static unsigned GetHash(const ::blink::mojom::BackgroundSyncNetworkState\u0026 value) {\n    using utype = std::underlying_type\u003c::blink::mojom::BackgroundSyncNetworkState\u003e::type;\n    return DefaultHash\u003cutype\u003e::Hash().GetHash(static_cast\u003cutype\u003e(value));\n  }\n  static bool Equal(const ::blink::mojom::BackgroundSyncNetworkState\u0026 left, const ::blink::mojom::BackgroundSyncNetworkState\u0026 right) {\n    return left == right;\n  }\n  static const bool safe_to_compare_to_empty_or_deleted = true;\n};\n\ntemplate \u003c\u003e\nstruct DefaultHash\u003c::blink::mojom::BackgroundSyncNetworkState\u003e {\n  using Hash = blink_mojom_internal_BackgroundSyncNetworkState_DataHashFn;\n};\n\ntemplate \u003c\u003e\nstruct HashTraits\u003c::blink::mojom::BackgroundSyncNetworkState\u003e\n    : public GenericHashTraits\u003c::blink::mojom::BackgroundSyncNetworkState\u003e {\n  static_assert(true,\n                \"-1000000 is a reserved enum value\");\n  static_assert(true,\n                \"-1000001 is a reserved enum value\");\n  static const bool hasIsEmptyValueFunction = true;\n  static bool IsEmptyValue(const ::blink::mojom::BackgroundSyncNetworkState\u0026 value) {\n    return value == static_cast\u003c::blink::mojom::BackgroundSyncNetworkState\u003e(-1000000);\n  }\n  static void ConstructDeletedValue(::blink::mojom::BackgroundSyncNetworkState\u0026 slot, bool) {\n    slot = static_cast\u003c::blink::mojom::BackgroundSyncNetworkState\u003e(-1000001);\n  }\n  static bool IsDeletedValue(const ::blink::mojom::BackgroundSyncNetworkState\u0026 value) {\n    return value == static_cast\u003c::blink::mojom::BackgroundSyncNetworkState\u003e(-1000001);\n  }\n};\n}  // namespace WTF\n\n\nnamespace WTF {\nstruct blink_mojom_internal_BackgroundSyncError_DataHashFn {\n  static unsigned GetHash(const ::blink::mojom::BackgroundSyncError\u0026 value) {\n    using utype = std::underlying_type\u003c::blink::mojom::BackgroundSyncError\u003e::type;\n    return DefaultHash\u003cutype\u003e::Hash().GetHash(static_cast\u003cutype\u003e(value));\n  }\n  static bool Equal(const ::blink::mojom::BackgroundSyncError\u0026 left, const ::blink::mojom::BackgroundSyncError\u0026 right) {\n    return left == right;\n  }\n  static const bool safe_to_compare_to_empty_or_deleted = true;\n};\n\ntemplate \u003c\u003e\nstruct DefaultHash\u003c::blink::mojom::BackgroundSyncError\u003e {\n  using Hash = blink_mojom_internal_BackgroundSyncError_DataHashFn;\n};\n\ntemplate \u003c\u003e\nstruct HashTraits\u003c::blink::mojom::BackgroundSyncError\u003e\n    : public GenericHashTraits\u003c::blink::mojom::BackgroundSyncError\u003e {\n  static_assert(true,\n                \"-1000000 is a reserved enum value\");\n  static_assert(true,\n                \"-1000001 is a reserved enum value\");\n  static const bool hasIsEmptyValueFunction = true;\n  static bool IsEmptyValue(const ::blink::mojom::BackgroundSyncError\u0026 value) {\n    return value == static_cast\u003c::blink::mojom::BackgroundSyncError\u003e(-1000000);\n  }\n  static void ConstructDeletedValue(::blink::mojom::BackgroundSyncError\u0026 slot, bool) {\n    slot = static_cast\u003c::blink::mojom::BackgroundSyncError\u003e(-1000001);\n  }\n  static bool IsDeletedValue(const ::blink::mojom::BackgroundSyncError\u0026 value) {\n    return value == static_cast\u003c::blink::mojom::BackgroundSyncError\u003e(-1000001);\n  }\n};\n}  // namespace WTF\n\n\nnamespace WTF {\nstruct blink_mojom_internal_BackgroundSyncState_DataHashFn {\n  static unsigned GetHash(const ::blink::mojom::BackgroundSyncState\u0026 value) {\n    using utype = std::underlying_type\u003c::blink::mojom::BackgroundSyncState\u003e::type;\n    return DefaultHash\u003cutype\u003e::Hash().GetHash(static_cast\u003cutype\u003e(value));\n  }\n  static bool Equal(const ::blink::mojom::BackgroundSyncState\u0026 left, const ::blink::mojom::BackgroundSyncState\u0026 right) {\n    return left == right;\n  }\n  static const bool safe_to_compare_to_empty_or_deleted = true;\n};\n\ntemplate \u003c\u003e\nstruct DefaultHash\u003c::blink::mojom::BackgroundSyncState\u003e {\n  using Hash = blink_mojom_internal_BackgroundSyncState_DataHashFn;\n};\n\ntemplate \u003c\u003e\nstruct HashTraits\u003c::blink::mojom::BackgroundSyncState\u003e\n    : public GenericHashTraits\u003c::blink::mojom::BackgroundSyncState\u003e {\n  static_assert(true,\n                \"-1000000 is a reserved enum value\");\n  static_assert(true,\n                \"-1000001 is a reserved enum value\");\n  static const bool hasIsEmptyValueFunction = true;\n  static bool IsEmptyValue(const ::blink::mojom::BackgroundSyncState\u0026 value) {\n    return value == static_cast\u003c::blink::mojom::BackgroundSyncState\u003e(-1000000);\n  }\n  static void ConstructDeletedValue(::blink::mojom::BackgroundSyncState\u0026 slot, bool) {\n    slot = static_cast\u003c::blink::mojom::BackgroundSyncState\u003e(-1000001);\n  }\n  static bool IsDeletedValue(const ::blink::mojom::BackgroundSyncState\u0026 value) {\n    return value == static_cast\u003c::blink::mojom::BackgroundSyncState\u003e(-1000001);\n  }\n};\n}  // namespace WTF\n\n\nnamespace WTF {\nstruct blink_mojom_internal_BackgroundSyncEventLastChance_DataHashFn {\n  static unsigned GetHash(const ::blink::mojom::BackgroundSyncEventLastChance\u0026 value) {\n    using utype = std::underlying_type\u003c::blink::mojom::BackgroundSyncEventLastChance\u003e::type;\n    return DefaultHash\u003cutype\u003e::Hash().GetHash(static_cast\u003cutype\u003e(value));\n  }\n  static bool Equal(const ::blink::mojom::BackgroundSyncEventLastChance\u0026 left, const ::blink::mojom::BackgroundSyncEventLastChance\u0026 right) {\n    return left == right;\n  }\n  static const bool safe_to_compare_to_empty_or_deleted = true;\n};\n\ntemplate \u003c\u003e\nstruct DefaultHash\u003c::blink::mojom::BackgroundSyncEventLastChance\u003e {\n  using Hash = blink_mojom_internal_BackgroundSyncEventLastChance_DataHashFn;\n};\n\ntemplate \u003c\u003e\nstruct HashTraits\u003c::blink::mojom::BackgroundSyncEventLastChance\u003e\n    : public GenericHashTraits\u003c::blink::mojom::BackgroundSyncEventLastChance\u003e {\n  static_assert(true,\n                \"-1000000 is a reserved enum value\");\n  static_assert(true,\n                \"-1000001 is a reserved enum value\");\n  static const bool hasIsEmptyValueFunction = true;\n  static bool IsEmptyValue(const ::blink::mojom::BackgroundSyncEventLastChance\u0026 value) {\n    return value == static_cast\u003c::blink::mojom::BackgroundSyncEventLastChance\u003e(-1000000);\n  }\n  static void ConstructDeletedValue(::blink::mojom::BackgroundSyncEventLastChance\u0026 slot, bool) {\n    slot = static_cast\u003c::blink::mojom::BackgroundSyncEventLastChance\u003e(-1000001);\n  }\n  static bool IsDeletedValue(const ::blink::mojom::BackgroundSyncEventLastChance\u0026 value) {\n    return value == static_cast\u003c::blink::mojom::BackgroundSyncEventLastChance\u003e(-1000001);\n  }\n};\n}  // namespace WTF\n\n\nnamespace blink {\nnamespace mojom {\nnamespace blink {\nusing BackgroundSyncNetworkState = BackgroundSyncNetworkState;  // Alias for definition in the parent namespace.\nusing BackgroundSyncError = BackgroundSyncError;  // Alias for definition in the parent namespace.\nusing BackgroundSyncState = BackgroundSyncState;  // Alias for definition in the parent namespace.\nusing BackgroundSyncEventLastChance = BackgroundSyncEventLastChance;  // Alias for definition in the parent namespace.\nclass BackgroundSyncService;\nusing BackgroundSyncServicePtr = mojo::InterfacePtr\u003cBackgroundSyncService\u003e;\nusing BackgroundSyncServicePtrInfo = mojo::InterfacePtrInfo\u003cBackgroundSyncService\u003e;\nusing ThreadSafeBackgroundSyncServicePtr =\n    mojo::ThreadSafeInterfacePtr\u003cBackgroundSyncService\u003e;\nusing BackgroundSyncServiceRequest = mojo::InterfaceRequest\u003cBackgroundSyncService\u003e;\nusing BackgroundSyncServiceAssociatedPtr =\n    mojo::AssociatedInterfacePtr\u003cBackgroundSyncService\u003e;\nusing ThreadSafeBackgroundSyncServiceAssociatedPtr =\n    mojo::ThreadSafeAssociatedInterfacePtr\u003cBackgroundSyncService\u003e;\nusing BackgroundSyncServiceAssociatedPtrInfo =\n    mojo::AssociatedInterfacePtrInfo\u003cBackgroundSyncService\u003e;\nusing BackgroundSyncServiceAssociatedRequest =\n    mojo::AssociatedInterfaceRequest\u003cBackgroundSyncService\u003e;\n\nclass SyncRegistration;\nusing SyncRegistrationPtr = mojo::InlinedStructPtr\u003cSyncRegistration\u003e;\n\n\nclass BackgroundSyncServiceProxy;\n\ntemplate \u003ctypename ImplRefTraits\u003e\nclass BackgroundSyncServiceStub;\n\nclass BackgroundSyncServiceRequestValidator;\nclass BackgroundSyncServiceResponseValidator;\n\nclass BLINK_PLATFORM_EXPORT BackgroundSyncService\n    : public BackgroundSyncServiceInterfaceBase {\n public:\n  static const char Name_[];\n  static constexpr uint32_t Version_ = 0;\n  static constexpr bool PassesAssociatedKinds_ = false;\n  static constexpr bool HasSyncMethods_ = false;\n\n  using Proxy_ = BackgroundSyncServiceProxy;\n\n  template \u003ctypename ImplRefTraits\u003e\n  using Stub_ = BackgroundSyncServiceStub\u003cImplRefTraits\u003e;\n\n  using RequestValidator_ = BackgroundSyncServiceRequestValidator;\n  using ResponseValidator_ = BackgroundSyncServiceResponseValidator;\n  enum MethodMinVersions : uint32_t {\n    kRegisterMinVersion = 0,\n    kGetRegistrationsMinVersion = 0,\n  };\n  virtual ~BackgroundSyncService() {}\n\n\n  using RegisterCallback = base::OnceCallback\u003cvoid(BackgroundSyncError, SyncRegistrationPtr)\u003e;\n  virtual void Register(SyncRegistrationPtr options, int64_t service_worker_registration_id, RegisterCallback callback) = 0;\n\n\n  using GetRegistrationsCallback = base::OnceCallback\u003cvoid(BackgroundSyncError, WTF::Vector\u003cSyncRegistrationPtr\u003e)\u003e;\n  virtual void GetRegistrations(int64_t service_worker_registration_id, GetRegistrationsCallback callback) = 0;\n};\nclass BLINK_PLATFORM_EXPORT BackgroundSyncServiceInterceptorForTesting : public BackgroundSyncService {\n  virtual BackgroundSyncService* GetForwardingInterface() = 0;\n  void Register(SyncRegistrationPtr options, int64_t service_worker_registration_id, RegisterCallback callback) override;\n  void GetRegistrations(int64_t service_worker_registration_id, GetRegistrationsCallback callback) override;\n};\n\nclass BLINK_PLATFORM_EXPORT BackgroundSyncServiceProxy\n    : public BackgroundSyncService {\n public:\n  explicit BackgroundSyncServiceProxy(mojo::MessageReceiverWithResponder* receiver);\n  void Register(SyncRegistrationPtr options, int64_t service_worker_registration_id, RegisterCallback callback) override;\n  void GetRegistrations(int64_t service_worker_registration_id, GetRegistrationsCallback callback) override;\n\n private:\n  mojo::MessageReceiverWithResponder* receiver_;\n};\nclass BLINK_PLATFORM_EXPORT BackgroundSyncServiceStubDispatch {\n public:\n  static bool Accept(BackgroundSyncService* impl, mojo::Message* message);\n  static bool AcceptWithResponder(\n      BackgroundSyncService* impl,\n      mojo::Message* message,\n      std::unique_ptr\u003cmojo::MessageReceiverWithStatus\u003e responder);\n};\n\ntemplate \u003ctypename ImplRefTraits =\n              mojo::RawPtrImplRefTraits\u003cBackgroundSyncService\u003e\u003e\nclass BackgroundSyncServiceStub\n    : public mojo::MessageReceiverWithResponderStatus {\n public:\n  using ImplPointerType = typename ImplRefTraits::PointerType;\n\n  BackgroundSyncServiceStub() {}\n  ~BackgroundSyncServiceStub() override {}\n\n  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }\n  ImplPointerType\u0026 sink() { return sink_; }\n\n  bool Accept(mojo::Message* message) override {\n    if (ImplRefTraits::IsNull(sink_))\n      return false;\n    return BackgroundSyncServiceStubDispatch::Accept(\n        ImplRefTraits::GetRawPointer(\u0026sink_), message);\n  }\n\n  bool AcceptWithResponder(\n      mojo::Message* message,\n      std::unique_ptr\u003cmojo::MessageReceiverWithStatus\u003e responder) override {\n    if (ImplRefTraits::IsNull(sink_))\n      return false;\n    return BackgroundSyncServiceStubDispatch::AcceptWithResponder(\n        ImplRefTraits::GetRawPointer(\u0026sink_), message, std::move(responder));\n  }\n\n private:\n  ImplPointerType sink_;\n};\nclass BLINK_PLATFORM_EXPORT BackgroundSyncServiceRequestValidator : public mojo::MessageReceiver {\n public:\n  bool Accept(mojo::Message* message) override;\n};\nclass BLINK_PLATFORM_EXPORT BackgroundSyncServiceResponseValidator : public mojo::MessageReceiver {\n public:\n  bool Accept(mojo::Message* message) override;\n};\n\n\nclass BLINK_PLATFORM_EXPORT SyncRegistration {\n public:\n  using DataView = SyncRegistrationDataView;\n  using Data_ = internal::SyncRegistration_Data;\n\n  template \u003ctypename... Args\u003e\n  static SyncRegistrationPtr New(Args\u0026\u0026... args) {\n    return SyncRegistrationPtr(\n        WTF::in_place,\n        std::forward\u003cArgs\u003e(args)...);\n  }\n\n  template \u003ctypename U\u003e\n  static SyncRegistrationPtr From(const U\u0026 u) {\n    return mojo::TypeConverter\u003cSyncRegistrationPtr, U\u003e::Convert(u);\n  }\n\n  template \u003ctypename U\u003e\n  U To() const {\n    return mojo::TypeConverter\u003cU, SyncRegistration\u003e::Convert(*this);\n  }\n\n\n  SyncRegistration();\n\n  SyncRegistration(\n      int64_t id,\n      const WTF::String\u0026 tag,\n      BackgroundSyncNetworkState network_state);\n\n  ~SyncRegistration();\n\n  // Clone() is a template so it is only instantiated if it is used. Thus, the\n  // bindings generator does not need to know whether Clone() or copy\n  // constructor/assignment are available for members.\n  template \u003ctypename StructPtrType = SyncRegistrationPtr\u003e\n  SyncRegistrationPtr Clone() const;\n\n  // Equals() is a template so it is only instantiated if it is used. Thus, the\n  // bindings generator does not need to know whether Equals() or == operator\n  // are available for members.\n  template \u003ctypename T,\n            typename std::enable_if\u003cstd::is_same\u003c\n                T, SyncRegistration\u003e::value\u003e::type* = nullptr\u003e\n  bool Equals(const T\u0026 other) const;\n  size_t Hash(size_t seed) const;\n\n  template \u003ctypename UserType\u003e\n  static WTF::Vector\u003cuint8_t\u003e Serialize(UserType* input) {\n    return mojo::internal::StructSerializeImpl\u003c\n        SyncRegistration::DataView, WTF::Vector\u003cuint8_t\u003e\u003e(input);\n  }\n\n  template \u003ctypename UserType\u003e\n  static mojo::Message SerializeAsMessage(UserType* input) {\n    return mojo::internal::StructSerializeAsMessageImpl\u003c\n        SyncRegistration::DataView\u003e(input);\n  }\n\n  template \u003ctypename UserType\u003e\n  static bool Deserialize(const void* data,\n                          size_t data_num_bytes,\n                          UserType* output) {\n    return mojo::internal::StructDeserializeImpl\u003cSyncRegistration::DataView\u003e(\n        data, data_num_bytes, std::vector\u003cmojo::ScopedHandle\u003e(), output, Validate);\n  }\n\n  template \u003ctypename UserType\u003e\n  static bool Deserialize(const WTF::Vector\u003cuint8_t\u003e\u0026 input,\n                          UserType* output) {\n    return SyncRegistration::Deserialize(\n        input.size() == 0 ? nullptr : \u0026input.front(), input.size(), output);\n  }\n\n  template \u003ctypename UserType\u003e\n  static bool DeserializeFromMessage(mojo::Message input,\n                                     UserType* output) {\n    return mojo::internal::StructDeserializeImpl\u003cSyncRegistration::DataView\u003e(\n        input.payload(), input.payload_num_bytes(),\n        std::move(*input.mutable_handles()), output, Validate);\n  }\n\n  int64_t id;\n  WTF::String tag;\n  BackgroundSyncNetworkState network_state;\n\n private:\n  static bool Validate(const void* data,\n                       mojo::internal::ValidationContext* validation_context);\n};\n\n\n\n\ntemplate \u003ctypename StructPtrType\u003e\nSyncRegistrationPtr SyncRegistration::Clone() const {\n  return New(\n      mojo::Clone(id),\n      mojo::Clone(tag),\n      mojo::Clone(network_state)\n  );\n}\n\ntemplate \u003ctypename T,\n          typename std::enable_if\u003cstd::is_same\u003c\n              T, SyncRegistration\u003e::value\u003e::type*\u003e\nbool SyncRegistration::Equals(const T\u0026 other) const {\n  if (!mojo::Equals(this-\u003eid, other.id))\n    return false;\n  if (!mojo::Equals(this-\u003etag, other.tag))\n    return false;\n  if (!mojo::Equals(this-\u003enetwork_state, other.network_state))\n    return false;\n  return true;\n}\n\n\n}  // namespace blink\n}  // namespace mojom\n}  // namespace blink\n\nnamespace mojo {\n\n\ntemplate \u003c\u003e\nstruct BLINK_PLATFORM_EXPORT StructTraits\u003c::blink::mojom::blink::SyncRegistration::DataView,\n                                         ::blink::mojom::blink::SyncRegistrationPtr\u003e {\n  static bool IsNull(const ::blink::mojom::blink::SyncRegistrationPtr\u0026 input) { return !input; }\n  static void SetToNull(::blink::mojom::blink::SyncRegistrationPtr* output) { output-\u003ereset(); }\n\n  static decltype(::blink::mojom::blink::SyncRegistration::id) id(\n      const ::blink::mojom::blink::SyncRegistrationPtr\u0026 input) {\n    return input-\u003eid;\n  }\n\n  static const decltype(::blink::mojom::blink::SyncRegistration::tag)\u0026 tag(\n      const ::blink::mojom::blink::SyncRegistrationPtr\u0026 input) {\n    return input-\u003etag;\n  }\n\n  static decltype(::blink::mojom::blink::SyncRegistration::network_state) network_state(\n      const ::blink::mojom::blink::SyncRegistrationPtr\u0026 input) {\n    return input-\u003enetwork_state;\n  }\n\n  static bool Read(::blink::mojom::blink::SyncRegistration::DataView input, ::blink::mojom::blink::SyncRegistrationPtr* output);\n};\n\n}  // namespace mojo\n\n#endif  // THIRD_PARTY_WEBKIT_PUBLIC_PLATFORM_MODULES_BACKGROUND_SYNC_BACKGROUND_SYNC_MOJOM_BLINK_H_"},"gob_info":{"repo":"chromium/chromium/src/out","commit":"eb796713090398ab3d173a0c23df390e0d740050","path":"Debug/gen/third_party/WebKit/public/platform/modules/background_sync/background_sync.mojom-blink.h"}}}],"elapsed_ms":211}