{
  "elapsed_ms": 53, 
  "file_info_response": [
    {
      "file_info": {
        "gob_info": {
          "repo": "chromium/chromium/src/out", 
          "commit": "a1a0a0f4a40120bb2f4d4d5a6ada465499be5622", 
          "path": "Debug/gen/third_party/blink/public/mojom/background_sync/background_sync.mojom-blink.h"
        }, 
        "name": "src/out/Debug/gen/third_party/blink/public/mojom/background_sync/background_sync.mojom-blink.h", 
        "language": "c++", 
        "changelist_num": "a1a0a0f4a40120bb2f4d4d5a6ada465499be5622", 
        "package_name": "chromium", 
        "lines": "638", 
        "content": {
          "text": "// Copyright 2013 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_BACKGROUND_SYNC_BACKGROUND_SYNC_MOJOM_BLINK_H_\n#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_BACKGROUND_SYNC_BACKGROUND_SYNC_MOJOM_BLINK_H_\n\n#include <stdint.h>\n\n#include <limits>\n#include <type_traits>\n#include <utility>\n\n#include \"base/callback.h\"\n#include \"base/macros.h\"\n#include \"base/optional.h\"\n\n#include \"mojo/public/cpp/bindings/mojo_buildflags.h\"\n#if BUILDFLAG(MOJO_TRACE_ENABLED)\n#include \"base/trace_event/trace_event.h\"\n#endif\n#include \"mojo/public/cpp/bindings/clone_traits.h\"\n#include \"mojo/public/cpp/bindings/equals_traits.h\"\n#include \"mojo/public/cpp/bindings/lib/serialization.h\"\n#include \"mojo/public/cpp/bindings/struct_ptr.h\"\n#include \"mojo/public/cpp/bindings/struct_traits.h\"\n#include \"mojo/public/cpp/bindings/union_traits.h\"\n#include \"third_party/blink/public/mojom/background_sync/background_sync.mojom-shared.h\"\n#include \"third_party/blink/public/mojom/background_sync/background_sync.mojom-blink-forward.h\"\n\n#include \"mojo/public/cpp/bindings/lib/wtf_clone_equals_util.h\"\n#include \"mojo/public/cpp/bindings/lib/wtf_hash_util.h\"\n#include \"third_party/blink/renderer/platform/wtf/hash_functions.h\"\n#include \"third_party/blink/renderer/platform/wtf/text/wtf_string.h\"\n\n#include \"mojo/public/cpp/bindings/associated_interface_ptr.h\"\n#include \"mojo/public/cpp/bindings/associated_interface_ptr_info.h\"\n#include \"mojo/public/cpp/bindings/associated_interface_request.h\"\n#include \"mojo/public/cpp/bindings/interface_ptr.h\"\n#include \"mojo/public/cpp/bindings/interface_request.h\"\n#include \"mojo/public/cpp/bindings/lib/control_message_handler.h\"\n#include \"mojo/public/cpp/bindings/raw_ptr_impl_ref_traits.h\"\n#include \"mojo/public/cpp/bindings/thread_safe_interface_ptr.h\"\n\n\n#include \"mojo/public/cpp/bindings/lib/native_enum_serialization.h\"\n#include \"mojo/public/cpp/bindings/lib/native_struct_serialization.h\"\n#include \"third_party/blink/renderer/platform/platform_export.h\"\n\n#ifdef KYTHE_IS_RUNNING\n#pragma kythe_inline_metadata \"Metadata comment\"\n#endif\n\n\nnamespace WTF {\nstruct blink_mojom_internal_BackgroundSyncError_DataHashFn {\n  static unsigned GetHash(const ::blink::mojom::BackgroundSyncError& value) {\n    using utype = std::underlying_type<::blink::mojom::BackgroundSyncError>::type;\n    return DefaultHash<utype>::Hash().GetHash(static_cast<utype>(value));\n  }\n  static bool Equal(const ::blink::mojom::BackgroundSyncError& left, const ::blink::mojom::BackgroundSyncError& right) {\n    return left == right;\n  }\n  static const bool safe_to_compare_to_empty_or_deleted = true;\n};\n\ntemplate <>\nstruct HashTraits<::blink::mojom::BackgroundSyncError>\n    : public GenericHashTraits<::blink::mojom::BackgroundSyncError> {\n  static_assert(true,\n                \"-1000000 is a reserved enum value\");\n  static_assert(true,\n                \"-1000001 is a reserved enum value\");\n  static const bool hasIsEmptyValueFunction = true;\n  static bool IsEmptyValue(const ::blink::mojom::BackgroundSyncError& value) {\n    return value == static_cast<::blink::mojom::BackgroundSyncError>(-1000000);\n  }\n  static void ConstructDeletedValue(::blink::mojom::BackgroundSyncError& slot, bool) {\n    slot = static_cast<::blink::mojom::BackgroundSyncError>(-1000001);\n  }\n  static bool IsDeletedValue(const ::blink::mojom::BackgroundSyncError& value) {\n    return value == static_cast<::blink::mojom::BackgroundSyncError>(-1000001);\n  }\n};\n}  // namespace WTF\n\n\nnamespace WTF {\nstruct blink_mojom_internal_BackgroundSyncState_DataHashFn {\n  static unsigned GetHash(const ::blink::mojom::BackgroundSyncState& value) {\n    using utype = std::underlying_type<::blink::mojom::BackgroundSyncState>::type;\n    return DefaultHash<utype>::Hash().GetHash(static_cast<utype>(value));\n  }\n  static bool Equal(const ::blink::mojom::BackgroundSyncState& left, const ::blink::mojom::BackgroundSyncState& right) {\n    return left == right;\n  }\n  static const bool safe_to_compare_to_empty_or_deleted = true;\n};\n\ntemplate <>\nstruct HashTraits<::blink::mojom::BackgroundSyncState>\n    : public GenericHashTraits<::blink::mojom::BackgroundSyncState> {\n  static_assert(true,\n                \"-1000000 is a reserved enum value\");\n  static_assert(true,\n                \"-1000001 is a reserved enum value\");\n  static const bool hasIsEmptyValueFunction = true;\n  static bool IsEmptyValue(const ::blink::mojom::BackgroundSyncState& value) {\n    return value == static_cast<::blink::mojom::BackgroundSyncState>(-1000000);\n  }\n  static void ConstructDeletedValue(::blink::mojom::BackgroundSyncState& slot, bool) {\n    slot = static_cast<::blink::mojom::BackgroundSyncState>(-1000001);\n  }\n  static bool IsDeletedValue(const ::blink::mojom::BackgroundSyncState& value) {\n    return value == static_cast<::blink::mojom::BackgroundSyncState>(-1000001);\n  }\n};\n}  // namespace WTF\n\n\nnamespace WTF {\nstruct blink_mojom_internal_BackgroundSyncEventLastChance_DataHashFn {\n  static unsigned GetHash(const ::blink::mojom::BackgroundSyncEventLastChance& value) {\n    using utype = std::underlying_type<::blink::mojom::BackgroundSyncEventLastChance>::type;\n    return DefaultHash<utype>::Hash().GetHash(static_cast<utype>(value));\n  }\n  static bool Equal(const ::blink::mojom::BackgroundSyncEventLastChance& left, const ::blink::mojom::BackgroundSyncEventLastChance& right) {\n    return left == right;\n  }\n  static const bool safe_to_compare_to_empty_or_deleted = true;\n};\n\ntemplate <>\nstruct HashTraits<::blink::mojom::BackgroundSyncEventLastChance>\n    : public GenericHashTraits<::blink::mojom::BackgroundSyncEventLastChance> {\n  static_assert(true,\n                \"-1000000 is a reserved enum value\");\n  static_assert(true,\n                \"-1000001 is a reserved enum value\");\n  static const bool hasIsEmptyValueFunction = true;\n  static bool IsEmptyValue(const ::blink::mojom::BackgroundSyncEventLastChance& value) {\n    return value == static_cast<::blink::mojom::BackgroundSyncEventLastChance>(-1000000);\n  }\n  static void ConstructDeletedValue(::blink::mojom::BackgroundSyncEventLastChance& slot, bool) {\n    slot = static_cast<::blink::mojom::BackgroundSyncEventLastChance>(-1000001);\n  }\n  static bool IsDeletedValue(const ::blink::mojom::BackgroundSyncEventLastChance& value) {\n    return value == static_cast<::blink::mojom::BackgroundSyncEventLastChance>(-1000001);\n  }\n};\n}  // namespace WTF\n\n\nnamespace WTF {\nstruct blink_mojom_internal_BackgroundSyncType_DataHashFn {\n  static unsigned GetHash(const ::blink::mojom::BackgroundSyncType& value) {\n    using utype = std::underlying_type<::blink::mojom::BackgroundSyncType>::type;\n    return DefaultHash<utype>::Hash().GetHash(static_cast<utype>(value));\n  }\n  static bool Equal(const ::blink::mojom::BackgroundSyncType& left, const ::blink::mojom::BackgroundSyncType& right) {\n    return left == right;\n  }\n  static const bool safe_to_compare_to_empty_or_deleted = true;\n};\n\ntemplate <>\nstruct HashTraits<::blink::mojom::BackgroundSyncType>\n    : public GenericHashTraits<::blink::mojom::BackgroundSyncType> {\n  static_assert(true,\n                \"-1000000 is a reserved enum value\");\n  static_assert(true,\n                \"-1000001 is a reserved enum value\");\n  static const bool hasIsEmptyValueFunction = true;\n  static bool IsEmptyValue(const ::blink::mojom::BackgroundSyncType& value) {\n    return value == static_cast<::blink::mojom::BackgroundSyncType>(-1000000);\n  }\n  static void ConstructDeletedValue(::blink::mojom::BackgroundSyncType& slot, bool) {\n    slot = static_cast<::blink::mojom::BackgroundSyncType>(-1000001);\n  }\n  static bool IsDeletedValue(const ::blink::mojom::BackgroundSyncType& value) {\n    return value == static_cast<::blink::mojom::BackgroundSyncType>(-1000001);\n  }\n};\n}  // namespace WTF\n\n\nnamespace blink {\nnamespace mojom {\nnamespace blink {\n\nclass BackgroundSyncServiceProxy;\n\ntemplate <typename ImplRefTraits>\nclass BackgroundSyncServiceStub;\n\nclass BackgroundSyncServiceRequestValidator;\nclass BackgroundSyncServiceResponseValidator;\n\n\n// @generated_from: blink.mojom.BackgroundSyncService\nclass PLATFORM_EXPORT BackgroundSyncService\n    : public BackgroundSyncServiceInterfaceBase {\n public:\n  static const char Name_[];\n  static constexpr uint32_t Version_ = 0;\n  static constexpr bool PassesAssociatedKinds_ = false;\n  static constexpr bool HasSyncMethods_ = false;\n\n  using Base_ = BackgroundSyncServiceInterfaceBase;\n  using Proxy_ = BackgroundSyncServiceProxy;\n\n  template <typename ImplRefTraits>\n  using Stub_ = BackgroundSyncServiceStub<ImplRefTraits>;\n\n  using RequestValidator_ = BackgroundSyncServiceRequestValidator;\n  using ResponseValidator_ = BackgroundSyncServiceResponseValidator;\n  enum MethodMinVersions : uint32_t {\n    kRegisterMinVersion = 0,\n    kDidResolveRegistrationMinVersion = 0,\n    kGetOneShotSyncRegistrationsMinVersion = 0,\n  };\n  virtual ~BackgroundSyncService() {}\n\n\n  using RegisterCallback = base::OnceCallback<void(BackgroundSyncError, SyncRegistrationOptionsPtr)>;\n  \n// @generated_from: blink.mojom.BackgroundSyncService.Register\n  virtual void Register(SyncRegistrationOptionsPtr options, int64_t service_worker_registration_id, RegisterCallback callback) = 0;\n\n  \n// @generated_from: blink.mojom.BackgroundSyncService.DidResolveRegistration\n  virtual void DidResolveRegistration(BackgroundSyncRegistrationInfoPtr registration_info) = 0;\n\n\n  using GetOneShotSyncRegistrationsCallback = base::OnceCallback<void(BackgroundSyncError, WTF::Vector<SyncRegistrationOptionsPtr>)>;\n  \n// @generated_from: blink.mojom.BackgroundSyncService.GetOneShotSyncRegistrations\n  virtual void GetOneShotSyncRegistrations(int64_t service_worker_registration_id, GetOneShotSyncRegistrationsCallback callback) = 0;\n};\n\nclass PLATFORM_EXPORT BackgroundSyncServiceProxy\n    : public BackgroundSyncService {\n public:\n  using InterfaceType = BackgroundSyncService;\n\n  explicit BackgroundSyncServiceProxy(mojo::MessageReceiverWithResponder* receiver);\n  void Register(SyncRegistrationOptionsPtr options, int64_t service_worker_registration_id, RegisterCallback callback) final;\n  void DidResolveRegistration(BackgroundSyncRegistrationInfoPtr registration_info) final;\n  void GetOneShotSyncRegistrations(int64_t service_worker_registration_id, GetOneShotSyncRegistrationsCallback callback) final;\n\n private:\n  mojo::MessageReceiverWithResponder* receiver_;\n};\nclass PLATFORM_EXPORT BackgroundSyncServiceStubDispatch {\n public:\n  static bool Accept(BackgroundSyncService* impl, mojo::Message* message);\n  static bool AcceptWithResponder(\n      BackgroundSyncService* impl,\n      mojo::Message* message,\n      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);\n};\n\ntemplate <typename ImplRefTraits =\n              mojo::RawPtrImplRefTraits<BackgroundSyncService>>\nclass BackgroundSyncServiceStub\n    : public mojo::MessageReceiverWithResponderStatus {\n public:\n  using ImplPointerType = typename ImplRefTraits::PointerType;\n\n  BackgroundSyncServiceStub() {}\n  ~BackgroundSyncServiceStub() override {}\n\n  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }\n  ImplPointerType& sink() { return sink_; }\n\n  bool Accept(mojo::Message* message) override {\n    if (ImplRefTraits::IsNull(sink_))\n      return false;\n    return BackgroundSyncServiceStubDispatch::Accept(\n        ImplRefTraits::GetRawPointer(&sink_), message);\n  }\n\n  bool AcceptWithResponder(\n      mojo::Message* message,\n      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {\n    if (ImplRefTraits::IsNull(sink_))\n      return false;\n    return BackgroundSyncServiceStubDispatch::AcceptWithResponder(\n        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));\n  }\n\n private:\n  ImplPointerType sink_;\n};\nclass PLATFORM_EXPORT BackgroundSyncServiceRequestValidator : public mojo::MessageReceiver {\n public:\n  bool Accept(mojo::Message* message) override;\n};\nclass PLATFORM_EXPORT BackgroundSyncServiceResponseValidator : public mojo::MessageReceiver {\n public:\n  bool Accept(mojo::Message* message) override;\n};\n\n\n\n\n\n// @generated_from: blink.mojom.SyncRegistrationOptions\nclass PLATFORM_EXPORT SyncRegistrationOptions {\n public:\n  using DataView = SyncRegistrationOptionsDataView;\n  using Data_ = internal::SyncRegistrationOptions_Data;\n\n  template <typename... Args>\n  static SyncRegistrationOptionsPtr New(Args&&... args) {\n    return SyncRegistrationOptionsPtr(\n        base::in_place, std::forward<Args>(args)...);\n  }\n\n  template <typename U>\n  static SyncRegistrationOptionsPtr From(const U& u) {\n    return mojo::TypeConverter<SyncRegistrationOptionsPtr, U>::Convert(u);\n  }\n\n  template <typename U>\n  U To() const {\n    return mojo::TypeConverter<U, SyncRegistrationOptions>::Convert(*this);\n  }\n\n\n  SyncRegistrationOptions();\n\n  SyncRegistrationOptions(\n      const WTF::String& tag,\n      int64_t min_interval);\n\n  ~SyncRegistrationOptions();\n\n  // Clone() is a template so it is only instantiated if it is used. Thus, the\n  // bindings generator does not need to know whether Clone() or copy\n  // constructor/assignment are available for members.\n  template <typename StructPtrType = SyncRegistrationOptionsPtr>\n  SyncRegistrationOptionsPtr Clone() const;\n\n  // Equals() is a template so it is only instantiated if it is used. Thus, the\n  // bindings generator does not need to know whether Equals() or == operator\n  // are available for members.\n  template <typename T,\n            typename std::enable_if<std::is_same<\n                T, SyncRegistrationOptions>::value>::type* = nullptr>\n  bool Equals(const T& other) const;\n  size_t Hash(size_t seed) const;\n\n  template <typename UserType>\n  static WTF::Vector<uint8_t> Serialize(UserType* input) {\n    return mojo::internal::SerializeImpl<\n        SyncRegistrationOptions::DataView, WTF::Vector<uint8_t>>(input);\n  }\n\n  template <typename UserType>\n  static mojo::Message SerializeAsMessage(UserType* input) {\n    return mojo::internal::SerializeAsMessageImpl<\n        SyncRegistrationOptions::DataView>(input);\n  }\n\n  // The returned Message is serialized only if the message is moved\n  // cross-process or cross-language. Otherwise if the message is Deserialized\n  // as the same UserType |input| will just be moved to |output| in\n  // DeserializeFromMessage.\n  template <typename UserType>\n  static mojo::Message WrapAsMessage(UserType input) {\n    return mojo::Message(std::make_unique<\n        internal::SyncRegistrationOptions_UnserializedMessageContext<\n            UserType, SyncRegistrationOptions::DataView>>(0, 0, std::move(input)));\n  }\n\n  template <typename UserType>\n  static bool Deserialize(const void* data,\n                          size_t data_num_bytes,\n                          UserType* output) {\n    return mojo::internal::DeserializeImpl<SyncRegistrationOptions::DataView>(\n        data, data_num_bytes, std::vector<mojo::ScopedHandle>(), output, Validate);\n  }\n\n  template <typename UserType>\n  static bool Deserialize(const WTF::Vector<uint8_t>& input,\n                          UserType* output) {\n    return SyncRegistrationOptions::Deserialize(\n        input.size() == 0 ? nullptr : &input.front(), input.size(), output);\n  }\n\n  template <typename UserType>\n  static bool DeserializeFromMessage(mojo::Message input,\n                                     UserType* output) {\n    auto context = input.TakeUnserializedContext<\n        internal::SyncRegistrationOptions_UnserializedMessageContext<\n            UserType, SyncRegistrationOptions::DataView>>();\n    if (context) {\n      *output = std::move(context->TakeData());\n      return true;\n    }\n    input.SerializeIfNecessary();\n    return mojo::internal::DeserializeImpl<SyncRegistrationOptions::DataView>(\n        input.payload(), input.payload_num_bytes(),\n        std::move(*input.mutable_handles()), output, Validate);\n  }\n\n  \n// @generated_from: blink.mojom.SyncRegistrationOptions.tag\n  WTF::String tag;\n  \n// @generated_from: blink.mojom.SyncRegistrationOptions.min_interval\n  int64_t min_interval;\n\n private:\n  static bool Validate(const void* data,\n                       mojo::internal::ValidationContext* validation_context);\n};\n\n\n\n\n\n// @generated_from: blink.mojom.BackgroundSyncRegistrationInfo\nclass PLATFORM_EXPORT BackgroundSyncRegistrationInfo {\n public:\n  using DataView = BackgroundSyncRegistrationInfoDataView;\n  using Data_ = internal::BackgroundSyncRegistrationInfo_Data;\n\n  template <typename... Args>\n  static BackgroundSyncRegistrationInfoPtr New(Args&&... args) {\n    return BackgroundSyncRegistrationInfoPtr(\n        base::in_place, std::forward<Args>(args)...);\n  }\n\n  template <typename U>\n  static BackgroundSyncRegistrationInfoPtr From(const U& u) {\n    return mojo::TypeConverter<BackgroundSyncRegistrationInfoPtr, U>::Convert(u);\n  }\n\n  template <typename U>\n  U To() const {\n    return mojo::TypeConverter<U, BackgroundSyncRegistrationInfo>::Convert(*this);\n  }\n\n\n  BackgroundSyncRegistrationInfo();\n\n  BackgroundSyncRegistrationInfo(\n      int64_t service_worker_registration_id,\n      const WTF::String& tag,\n      BackgroundSyncType sync_type);\n\n  ~BackgroundSyncRegistrationInfo();\n\n  // Clone() is a template so it is only instantiated if it is used. Thus, the\n  // bindings generator does not need to know whether Clone() or copy\n  // constructor/assignment are available for members.\n  template <typename StructPtrType = BackgroundSyncRegistrationInfoPtr>\n  BackgroundSyncRegistrationInfoPtr Clone() const;\n\n  // Equals() is a template so it is only instantiated if it is used. Thus, the\n  // bindings generator does not need to know whether Equals() or == operator\n  // are available for members.\n  template <typename T,\n            typename std::enable_if<std::is_same<\n                T, BackgroundSyncRegistrationInfo>::value>::type* = nullptr>\n  bool Equals(const T& other) const;\n  size_t Hash(size_t seed) const;\n\n  template <typename UserType>\n  static WTF::Vector<uint8_t> Serialize(UserType* input) {\n    return mojo::internal::SerializeImpl<\n        BackgroundSyncRegistrationInfo::DataView, WTF::Vector<uint8_t>>(input);\n  }\n\n  template <typename UserType>\n  static mojo::Message SerializeAsMessage(UserType* input) {\n    return mojo::internal::SerializeAsMessageImpl<\n        BackgroundSyncRegistrationInfo::DataView>(input);\n  }\n\n  // The returned Message is serialized only if the message is moved\n  // cross-process or cross-language. Otherwise if the message is Deserialized\n  // as the same UserType |input| will just be moved to |output| in\n  // DeserializeFromMessage.\n  template <typename UserType>\n  static mojo::Message WrapAsMessage(UserType input) {\n    return mojo::Message(std::make_unique<\n        internal::BackgroundSyncRegistrationInfo_UnserializedMessageContext<\n            UserType, BackgroundSyncRegistrationInfo::DataView>>(0, 0, std::move(input)));\n  }\n\n  template <typename UserType>\n  static bool Deserialize(const void* data,\n                          size_t data_num_bytes,\n                          UserType* output) {\n    return mojo::internal::DeserializeImpl<BackgroundSyncRegistrationInfo::DataView>(\n        data, data_num_bytes, std::vector<mojo::ScopedHandle>(), output, Validate);\n  }\n\n  template <typename UserType>\n  static bool Deserialize(const WTF::Vector<uint8_t>& input,\n                          UserType* output) {\n    return BackgroundSyncRegistrationInfo::Deserialize(\n        input.size() == 0 ? nullptr : &input.front(), input.size(), output);\n  }\n\n  template <typename UserType>\n  static bool DeserializeFromMessage(mojo::Message input,\n                                     UserType* output) {\n    auto context = input.TakeUnserializedContext<\n        internal::BackgroundSyncRegistrationInfo_UnserializedMessageContext<\n            UserType, BackgroundSyncRegistrationInfo::DataView>>();\n    if (context) {\n      *output = std::move(context->TakeData());\n      return true;\n    }\n    input.SerializeIfNecessary();\n    return mojo::internal::DeserializeImpl<BackgroundSyncRegistrationInfo::DataView>(\n        input.payload(), input.payload_num_bytes(),\n        std::move(*input.mutable_handles()), output, Validate);\n  }\n\n  \n// @generated_from: blink.mojom.BackgroundSyncRegistrationInfo.service_worker_registration_id\n  int64_t service_worker_registration_id;\n  \n// @generated_from: blink.mojom.BackgroundSyncRegistrationInfo.tag\n  WTF::String tag;\n  \n// @generated_from: blink.mojom.BackgroundSyncRegistrationInfo.sync_type\n  BackgroundSyncType sync_type;\n\n private:\n  static bool Validate(const void* data,\n                       mojo::internal::ValidationContext* validation_context);\n};\n\n\n\n\n\ntemplate <typename StructPtrType>\nSyncRegistrationOptionsPtr SyncRegistrationOptions::Clone() const {\n  return New(\n      mojo::Clone(tag),\n      mojo::Clone(min_interval)\n  );\n}\n\ntemplate <typename T,\n          typename std::enable_if<std::is_same<\n              T, SyncRegistrationOptions>::value>::type*>\nbool SyncRegistrationOptions::Equals(const T& other_struct) const {\n  if (!mojo::Equals(this->tag, other_struct.tag))\n    return false;\n  if (!mojo::Equals(this->min_interval, other_struct.min_interval))\n    return false;\n  return true;\n}\ntemplate <typename StructPtrType>\nBackgroundSyncRegistrationInfoPtr BackgroundSyncRegistrationInfo::Clone() const {\n  return New(\n      mojo::Clone(service_worker_registration_id),\n      mojo::Clone(tag),\n      mojo::Clone(sync_type)\n  );\n}\n\ntemplate <typename T,\n          typename std::enable_if<std::is_same<\n              T, BackgroundSyncRegistrationInfo>::value>::type*>\nbool BackgroundSyncRegistrationInfo::Equals(const T& other_struct) const {\n  if (!mojo::Equals(this->service_worker_registration_id, other_struct.service_worker_registration_id))\n    return false;\n  if (!mojo::Equals(this->tag, other_struct.tag))\n    return false;\n  if (!mojo::Equals(this->sync_type, other_struct.sync_type))\n    return false;\n  return true;\n}\n\n\n}  // namespace blink\n}  // namespace mojom\n}  // namespace blink\n\nnamespace mojo {\n\n\ntemplate <>\nstruct PLATFORM_EXPORT StructTraits<::blink::mojom::blink::SyncRegistrationOptions::DataView,\n                                         ::blink::mojom::blink::SyncRegistrationOptionsPtr> {\n  static bool IsNull(const ::blink::mojom::blink::SyncRegistrationOptionsPtr& input) { return !input; }\n  static void SetToNull(::blink::mojom::blink::SyncRegistrationOptionsPtr* output) { output->reset(); }\n\n  static const decltype(::blink::mojom::blink::SyncRegistrationOptions::tag)& tag(\n      const ::blink::mojom::blink::SyncRegistrationOptionsPtr& input) {\n    return input->tag;\n  }\n\n  static decltype(::blink::mojom::blink::SyncRegistrationOptions::min_interval) min_interval(\n      const ::blink::mojom::blink::SyncRegistrationOptionsPtr& input) {\n    return input->min_interval;\n  }\n\n  static bool Read(::blink::mojom::blink::SyncRegistrationOptions::DataView input, ::blink::mojom::blink::SyncRegistrationOptionsPtr* output);\n};\n\n\ntemplate <>\nstruct PLATFORM_EXPORT StructTraits<::blink::mojom::blink::BackgroundSyncRegistrationInfo::DataView,\n                                         ::blink::mojom::blink::BackgroundSyncRegistrationInfoPtr> {\n  static bool IsNull(const ::blink::mojom::blink::BackgroundSyncRegistrationInfoPtr& input) { return !input; }\n  static void SetToNull(::blink::mojom::blink::BackgroundSyncRegistrationInfoPtr* output) { output->reset(); }\n\n  static decltype(::blink::mojom::blink::BackgroundSyncRegistrationInfo::service_worker_registration_id) service_worker_registration_id(\n      const ::blink::mojom::blink::BackgroundSyncRegistrationInfoPtr& input) {\n    return input->service_worker_registration_id;\n  }\n\n  static const decltype(::blink::mojom::blink::BackgroundSyncRegistrationInfo::tag)& tag(\n      const ::blink::mojom::blink::BackgroundSyncRegistrationInfoPtr& input) {\n    return input->tag;\n  }\n\n  static decltype(::blink::mojom::blink::BackgroundSyncRegistrationInfo::sync_type) sync_type(\n      const ::blink::mojom::blink::BackgroundSyncRegistrationInfoPtr& input) {\n    return input->sync_type;\n  }\n\n  static bool Read(::blink::mojom::blink::BackgroundSyncRegistrationInfo::DataView input, ::blink::mojom::blink::BackgroundSyncRegistrationInfoPtr* output);\n};\n\n}  // namespace mojo\n\n#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_BACKGROUND_SYNC_BACKGROUND_SYNC_MOJOM_BLINK_H_"
        }, 
        "generated": true, 
        "mime_type": "text/plain", 
        "size": "24360", 
        "type": 1, 
        "md5": "4451c632fffa6f5aa9af56fad8ca667f", 
        "codeblock": [
          {
            "modifiers": {}, 
            "type": 11, 
            "name": "WTF", 
            "text_range": {
              "start_line": 55, 
              "end_line": 85, 
              "start_column": 1, 
              "end_column": 2
            }, 
            "child": [
              {
                "modifiers": {}, 
                "type": 3, 
                "name": "blink_mojom_internal_BackgroundSyncError_DataHashFn", 
                "text_range": {
                  "start_line": 56, 
                  "end_line": 65, 
                  "start_column": 1, 
                  "end_column": 2
                }, 
                "child": [
                  {
                    "modifiers": {}, 
                    "type": 8, 
                    "name": "GetHash", 
                    "text_range": {
                      "start_line": 57, 
                      "end_line": 60, 
                      "start_column": 3, 
                      "end_column": 4
                    }
                  }, 
                  {
                    "modifiers": {}, 
                    "type": 8, 
                    "name": "Equal", 
                    "text_range": {
                      "start_line": 61, 
                      "end_line": 63, 
                      "start_column": 3, 
                      "end_column": 4
                    }
                  }, 
                  {
                    "modifiers": {}, 
                    "type": 9, 
                    "name": "safe_to_compare_to_empty_or_deleted", 
                    "text_range": {
                      "start_line": 64, 
                      "end_line": 64, 
                      "start_column": 3, 
                      "end_column": 63
                    }
                  }
                ]
              }, 
              {
                "modifiers": {}, 
                "type": 3, 
                "name": "HashTraits", 
                "text_range": {
                  "start_line": 67, 
                  "end_line": 84, 
                  "start_column": 1, 
                  "end_column": 2
                }, 
                "child": [
                  {
                    "modifiers": {}, 
                    "type": 9, 
                    "name": "hasIsEmptyValueFunction", 
                    "text_range": {
                      "start_line": 74, 
                      "end_line": 74, 
                      "start_column": 3, 
                      "end_column": 51
                    }
                  }, 
                  {
                    "modifiers": {}, 
                    "type": 8, 
                    "name": "IsEmptyValue", 
                    "text_range": {
                      "start_line": 75, 
                      "end_line": 77, 
                      "start_column": 3, 
                      "end_column": 4
                    }
                  }, 
                  {
                    "modifiers": {}, 
                    "type": 8, 
                    "name": "ConstructDeletedValue", 
                    "text_range": {
                      "start_line": 78, 
                      "end_line": 80, 
                      "start_column": 3, 
                      "end_column": 4
                    }
                  }, 
                  {
                    "modifiers": {}, 
                    "type": 8, 
                    "name": "IsDeletedValue", 
                    "text_range": {
                      "start_line": 81, 
                      "end_line": 83, 
                      "start_column": 3, 
                      "end_column": 4
                    }
                  }
                ]
              }
            ]
          }, 
          {
            "modifiers": {}, 
            "type": 11, 
            "name": "WTF", 
            "text_range": {
              "start_line": 88, 
              "end_line": 118, 
              "start_column": 1, 
              "end_column": 2
            }, 
            "child": [
              {
                "modifiers": {}, 
                "type": 3, 
                "name": "blink_mojom_internal_BackgroundSyncState_DataHashFn", 
                "text_range": {
                  "start_line": 89, 
                  "end_line": 98, 
                  "start_column": 1, 
                  "end_column": 2
                }, 
                "child": [
                  {
                    "modifiers": {}, 
                    "type": 8, 
                    "name": "GetHash", 
                    "text_range": {
                      "start_line": 90, 
                      "end_line": 93, 
                      "start_column": 3, 
                      "end_column": 4
                    }
                  }, 
                  {
                    "modifiers": {}, 
                    "type": 8, 
                    "name": "Equal", 
                    "text_range": {
                      "start_line": 94, 
                      "end_line": 96, 
                      "start_column": 3, 
                      "end_column": 4
                    }
                  }, 
                  {
                    "modifiers": {}, 
                    "type": 9, 
                    "name": "safe_to_compare_to_empty_or_deleted", 
                    "text_range": {
                      "start_line": 97, 
                      "end_line": 97, 
                      "start_column": 3, 
                      "end_column": 63
                    }
                  }
                ]
              }, 
              {
                "modifiers": {}, 
                "type": 3, 
                "name": "HashTraits", 
                "text_range": {
                  "start_line": 100, 
                  "end_line": 117, 
                  "start_column": 1, 
                  "end_column": 2
                }, 
                "child": [
                  {
                    "modifiers": {}, 
                    "type": 9, 
                    "name": "hasIsEmptyValueFunction", 
                    "text_range": {
                      "start_line": 107, 
                      "end_line": 107, 
                      "start_column": 3, 
                      "end_column": 51
                    }
                  }, 
                  {
                    "modifiers": {}, 
                    "type": 8, 
                    "name": "IsEmptyValue", 
                    "text_range": {
                      "start_line": 108, 
                      "end_line": 110, 
                      "start_column": 3, 
                      "end_column": 4
                    }
                  }, 
                  {
                    "modifiers": {}, 
                    "type": 8, 
                    "name": "ConstructDeletedValue", 
                    "text_range": {
                      "start_line": 111, 
                      "end_line": 113, 
                      "start_column": 3, 
                      "end_column": 4
                    }
                  }, 
                  {
                    "modifiers": {}, 
                    "type": 8, 
                    "name": "IsDeletedValue", 
                    "text_range": {
                      "start_line": 114, 
                      "end_line": 116, 
                      "start_column": 3, 
                      "end_column": 4
                    }
                  }
                ]
              }
            ]
          }, 
          {
            "modifiers": {}, 
            "type": 11, 
            "name": "WTF", 
            "text_range": {
              "start_line": 121, 
              "end_line": 151, 
              "start_column": 1, 
              "end_column": 2
            }, 
            "child": [
              {
                "modifiers": {}, 
                "type": 3, 
                "name": "blink_mojom_internal_BackgroundSyncEventLastChance_DataHashFn", 
                "text_range": {
                  "start_line": 122, 
                  "end_line": 131, 
                  "start_column": 1, 
                  "end_column": 2
                }, 
                "child": [
                  {
                    "modifiers": {}, 
                    "type": 8, 
                    "name": "GetHash", 
                    "text_range": {
                      "start_line": 123, 
                      "end_line": 126, 
                      "start_column": 3, 
                      "end_column": 4
                    }
                  }, 
                  {
                    "modifiers": {}, 
                    "type": 8, 
                    "name": "Equal", 
                    "text_range": {
                      "start_line": 127, 
                      "end_line": 129, 
                      "start_column": 3, 
                      "end_column": 4
                    }
                  }, 
                  {
                    "modifiers": {}, 
                    "type": 9, 
                    "name": "safe_to_compare_to_empty_or_deleted", 
                    "text_range": {
                      "start_line": 130, 
                      "end_line": 130, 
                      "start_column": 3, 
                      "end_column": 63
                    }
                  }
                ]
              }, 
              {
                "modifiers": {}, 
                "type": 3, 
                "name": "HashTraits", 
                "text_range": {
                  "start_line": 133, 
                  "end_line": 150, 
                  "start_column": 1, 
                  "end_column": 2
                }, 
                "child": [
                  {
                    "modifiers": {}, 
                    "type": 9, 
                    "name": "hasIsEmptyValueFunction", 
                    "text_range": {
                      "start_line": 140, 
                      "end_line": 140, 
                      "start_column": 3, 
                      "end_column": 51
                    }
                  }, 
                  {
                    "modifiers": {}, 
                    "type": 8, 
                    "name": "IsEmptyValue", 
                    "text_range": {
                      "start_line": 141, 
                      "end_line": 143, 
                      "start_column": 3, 
                      "end_column": 4
                    }
                  }, 
                  {
                    "modifiers": {}, 
                    "type": 8, 
                    "name": "ConstructDeletedValue", 
                    "text_range": {
                      "start_line": 144, 
                      "end_line": 146, 
                      "start_column": 3, 
                      "end_column": 4
                    }
                  }, 
                  {
                    "modifiers": {}, 
                    "type": 8, 
                    "name": "IsDeletedValue", 
                    "text_range": {
                      "start_line": 147, 
                      "end_line": 149, 
                      "start_column": 3, 
                      "end_column": 4
                    }
                  }
                ]
              }
            ]
          }, 
          {
            "modifiers": {}, 
            "type": 11, 
            "name": "WTF", 
            "text_range": {
              "start_line": 154, 
              "end_line": 184, 
              "start_column": 1, 
              "end_column": 2
            }, 
            "child": [
              {
                "modifiers": {}, 
                "type": 3, 
                "name": "blink_mojom_internal_BackgroundSyncType_DataHashFn", 
                "text_range": {
                  "start_line": 155, 
                  "end_line": 164, 
                  "start_column": 1, 
                  "end_column": 2
                }, 
                "child": [
                  {
                    "modifiers": {}, 
                    "type": 8, 
                    "name": "GetHash", 
                    "text_range": {
                      "start_line": 156, 
                      "end_line": 159, 
                      "start_column": 3, 
                      "end_column": 4
                    }
                  }, 
                  {
                    "modifiers": {}, 
                    "type": 8, 
                    "name": "Equal", 
                    "text_range": {
                      "start_line": 160, 
                      "end_line": 162, 
                      "start_column": 3, 
                      "end_column": 4
                    }
                  }, 
                  {
                    "modifiers": {}, 
                    "type": 9, 
                    "name": "safe_to_compare_to_empty_or_deleted", 
                    "text_range": {
                      "start_line": 163, 
                      "end_line": 163, 
                      "start_column": 3, 
                      "end_column": 63
                    }
                  }
                ]
              }, 
              {
                "modifiers": {}, 
                "type": 3, 
                "name": "HashTraits", 
                "text_range": {
                  "start_line": 166, 
                  "end_line": 183, 
                  "start_column": 1, 
                  "end_column": 2
                }, 
                "child": [
                  {
                    "modifiers": {}, 
                    "type": 9, 
                    "name": "hasIsEmptyValueFunction", 
                    "text_range": {
                      "start_line": 173, 
                      "end_line": 173, 
                      "start_column": 3, 
                      "end_column": 51
                    }
                  }, 
                  {
                    "modifiers": {}, 
                    "type": 8, 
                    "name": "IsEmptyValue", 
                    "text_range": {
                      "start_line": 174, 
                      "end_line": 176, 
                      "start_column": 3, 
                      "end_column": 4
                    }
                  }, 
                  {
                    "modifiers": {}, 
                    "type": 8, 
                    "name": "ConstructDeletedValue", 
                    "text_range": {
                      "start_line": 177, 
                      "end_line": 179, 
                      "start_column": 3, 
                      "end_column": 4
                    }
                  }, 
                  {
                    "modifiers": {}, 
                    "type": 8, 
                    "name": "IsDeletedValue", 
                    "text_range": {
                      "start_line": 180, 
                      "end_line": 182, 
                      "start_column": 3, 
                      "end_column": 4
                    }
                  }
                ]
              }
            ]
          }, 
          {
            "modifiers": {}, 
            "type": 11, 
            "name": "blink", 
            "text_range": {
              "start_line": 187, 
              "end_line": 587, 
              "start_column": 1, 
              "end_column": 2
            }, 
            "child": [
              {
                "modifiers": {}, 
                "type": 11, 
                "name": "mojom", 
                "text_range": {
                  "start_line": 188, 
                  "end_line": 586, 
                  "start_column": 1, 
                  "end_column": 2
                }, 
                "child": [
                  {
                    "modifiers": {}, 
                    "type": 11, 
                    "name": "blink", 
                    "text_range": {
                      "start_line": 189, 
                      "end_line": 585, 
                      "start_column": 1, 
                      "end_column": 2
                    }, 
                    "child": [
                      {
                        "modifiers": {}, 
                        "type": 1, 
                        "name": "PLATFORM_EXPORT BackgroundSyncService", 
                        "text_range": {
                          "start_line": 201, 
                          "end_line": 239, 
                          "start_column": 1, 
                          "end_column": 2
                        }, 
                        "child": [
                          {
                            "modifiers": {}, 
                            "type": 9, 
                            "name": "Name_", 
                            "text_range": {
                              "start_line": 204, 
                              "end_line": 204, 
                              "start_column": 3, 
                              "end_column": 28
                            }
                          }, 
                          {
                            "modifiers": {}, 
                            "type": 9, 
                            "name": "Version_", 
                            "text_range": {
                              "start_line": 205, 
                              "end_line": 205, 
                              "start_column": 3, 
                              "end_column": 41
                            }
                          }, 
                          {
                            "modifiers": {}, 
                            "type": 9, 
                            "name": "PassesAssociatedKinds_", 
                            "text_range": {
                              "start_line": 206, 
                              "end_line": 206, 
                              "start_column": 3, 
                              "end_column": 55
                            }
                          }, 
                          {
                            "modifiers": {}, 
                            "type": 9, 
                            "name": "HasSyncMethods_", 
                            "text_range": {
                              "start_line": 207, 
                              "end_line": 207, 
                              "start_column": 3, 
                              "end_column": 48
                            }
                          }, 
                          {
                            "modifiers": {}, 
                            "type": 4, 
                            "name": "MethodMinVersions", 
                            "text_range": {
                              "start_line": 217, 
                              "end_line": 221, 
                              "start_column": 3, 
                              "end_column": 4
                            }
                          }, 
                          {
                            "modifiers": {}, 
                            "type": 8, 
                            "name": "Register", 
                            "text_range": {
                              "start_line": 228, 
                              "end_line": 228, 
                              "start_column": 3, 
                              "end_column": 131
                            }
                          }, 
                          {
                            "modifiers": {}, 
                            "type": 8, 
                            "name": "DidResolveRegistration", 
                            "text_range": {
                              "start_line": 232, 
                              "end_line": 232, 
                              "start_column": 3, 
                              "end_column": 95
                            }
                          }, 
                          {
                            "modifiers": {}, 
                            "type": 8, 
                            "name": "GetOneShotSyncRegistrations", 
                            "text_range": {
                              "start_line": 238, 
                              "end_line": 238, 
                              "start_column": 3, 
                              "end_column": 133
                            }
                          }
                        ]
                      }, 
                      {
                        "modifiers": {}, 
                        "type": 1, 
                        "name": "PLATFORM_EXPORT BackgroundSyncServiceProxy", 
                        "text_range": {
                          "start_line": 241, 
                          "end_line": 253, 
                          "start_column": 1, 
                          "end_column": 2
                        }, 
                        "child": [
                          {
                            "modifiers": {}, 
                            "type": 8, 
                            "name": "BackgroundSyncServiceProxy", 
                            "text_range": {
                              "start_line": 246, 
                              "end_line": 246, 
                              "start_column": 3, 
                              "end_column": 84
                            }
                          }, 
                          {
                            "modifiers": {}, 
                            "type": 8, 
                            "name": "Register", 
                            "text_range": {
                              "start_line": 247, 
                              "end_line": 247, 
                              "start_column": 3, 
                              "end_column": 125
                            }
                          }, 
                          {
                            "modifiers": {}, 
                            "type": 8, 
                            "name": "DidResolveRegistration", 
                            "text_range": {
                              "start_line": 248, 
                              "end_line": 248, 
                              "start_column": 3, 
                              "end_column": 89
                            }
                          }, 
                          {
                            "modifiers": {}, 
                            "type": 8, 
                            "name": "GetOneShotSyncRegistrations", 
                            "text_range": {
                              "start_line": 249, 
                              "end_line": 249, 
                              "start_column": 3, 
                              "end_column": 127
                            }
                          }, 
                          {
                            "modifiers": {}, 
                            "type": 9, 
                            "name": "receiver_", 
                            "text_range": {
                              "start_line": 252, 
                              "end_line": 252, 
                              "start_column": 3, 
                              "end_column": 48
                            }
                          }
                        ]
                      }, 
                      {
                        "modifiers": {}, 
                        "type": 1, 
                        "name": "PLATFORM_EXPORT BackgroundSyncServiceStubDispatch", 
                        "text_range": {
                          "start_line": 254, 
                          "end_line": 261, 
                          "start_column": 1, 
                          "end_column": 2
                        }, 
                        "child": [
                          {
                            "modifiers": {}, 
                            "type": 8, 
                            "name": "Accept", 
                            "text_range": {
                              "start_line": 256, 
                              "end_line": 256, 
                              "start_column": 3, 
                              "end_column": 74
                            }
                          }, 
                          {
                            "modifiers": {}, 
                            "type": 8, 
                            "name": "AcceptWithResponder", 
                            "text_range": {
                              "start_line": 257, 
                              "end_line": 260, 
                              "start_column": 3, 
                              "end_column": 66
                            }
                          }
                        ]
                      }, 
                      {
                        "modifiers": {}, 
                        "type": 1, 
                        "name": "BackgroundSyncServiceStub", 
                        "text_range": {
                          "start_line": 265, 
                          "end_line": 294, 
                          "start_column": 1, 
                          "end_column": 2
                        }, 
                        "child": [
                          {
                            "modifiers": {}, 
                            "type": 8, 
                            "name": "BackgroundSyncServiceStub", 
                            "text_range": {
                              "start_line": 270, 
                              "end_line": 270, 
                              "start_column": 3, 
                              "end_column": 33
                            }
                          }, 
                          {
                            "modifiers": {}, 
                            "type": 8, 
                            "name": "~BackgroundSyncServiceStub", 
                            "text_range": {
                              "start_line": 271, 
                              "end_line": 271, 
                              "start_column": 3, 
                              "end_column": 43
                            }
                          }, 
                          {
                            "modifiers": {}, 
                            "type": 8, 
                            "name": "set_sink", 
                            "text_range": {
                              "start_line": 273, 
                              "end_line": 273, 
                              "start_column": 3, 
                              "end_column": 67
                            }
                          }, 
                          {
                            "modifiers": {}, 
                            "type": 8, 
                            "name": "sink", 
                            "text_range": {
                              "start_line": 274, 
                              "end_line": 274, 
                              "start_column": 3, 
                              "end_column": 44
                            }
                          }, 
                          {
                            "modifiers": {}, 
                            "type": 8, 
                            "name": "Accept", 
                            "text_range": {
                              "start_line": 276, 
                              "end_line": 281, 
                              "start_column": 3, 
                              "end_column": 4
                            }
                          }, 
                          {
                            "modifiers": {}, 
                            "type": 8, 
                            "name": "AcceptWithResponder", 
                            "text_range": {
                              "start_line": 283, 
                              "end_line": 290, 
                              "start_column": 3, 
                              "end_column": 4
                            }
                          }, 
                          {
                            "modifiers": {}, 
                            "type": 9, 
                            "name": "ImplPointerType", 
                            "text_range": {
                              "start_line": 293, 
                              "end_line": 293, 
                              "start_column": 3, 
                              "end_column": 24
                            }
                          }
                        ]
                      }, 
                      {
                        "modifiers": {}, 
                        "type": 1, 
                        "name": "PLATFORM_EXPORT BackgroundSyncServiceRequestValidator", 
                        "text_range": {
                          "start_line": 295, 
                          "end_line": 298, 
                          "start_column": 1, 
                          "end_column": 2
                        }, 
                        "child": [
                          {
                            "modifiers": {}, 
                            "type": 8, 
                            "name": "Accept", 
                            "text_range": {
                              "start_line": 297, 
                              "end_line": 297, 
                              "start_column": 3, 
                              "end_column": 47
                            }
                          }
                        ]
                      }, 
                      {
                        "modifiers": {}, 
                        "type": 1, 
                        "name": "PLATFORM_EXPORT BackgroundSyncServiceResponseValidator", 
                        "text_range": {
                          "start_line": 299, 
                          "end_line": 302, 
                          "start_column": 1, 
                          "end_column": 2
                        }, 
                        "child": [
                          {
                            "modifiers": {}, 
                            "type": 8, 
                            "name": "Accept", 
                            "text_range": {
                              "start_line": 301, 
                              "end_line": 301, 
                              "start_column": 3, 
                              "end_column": 47
                            }
                          }
                        ]
                      }, 
                      {
                        "modifiers": {}, 
                        "type": 1, 
                        "name": "PLATFORM_EXPORT SyncRegistrationOptions", 
                        "text_range": {
                          "start_line": 309, 
                          "end_line": 418, 
                          "start_column": 1, 
                          "end_column": 2
                        }, 
                        "child": [
                          {
                            "modifiers": {}, 
                            "type": 8, 
                            "name": "New", 
                            "text_range": {
                              "start_line": 315, 
                              "end_line": 318, 
                              "start_column": 3, 
                              "end_column": 4
                            }
                          }, 
                          {
                            "modifiers": {}, 
                            "type": 8, 
                            "name": "From", 
                            "text_range": {
                              "start_line": 321, 
                              "end_line": 323, 
                              "start_column": 3, 
                              "end_column": 4
                            }
                          }, 
                          {
                            "modifiers": {}, 
                            "type": 8, 
                            "name": "To", 
                            "text_range": {
                              "start_line": 326, 
                              "end_line": 328, 
                              "start_column": 3, 
                              "end_column": 4
                            }
                          }, 
                          {
                            "modifiers": {}, 
                            "type": 8, 
                            "name": "SyncRegistrationOptions", 
                            "text_range": {
                              "start_line": 331, 
                              "end_line": 331, 
                              "start_column": 3, 
                              "end_column": 28
                            }
                          }, 
                          {
                            "modifiers": {}, 
                            "type": 8, 
                            "name": "SyncRegistrationOptions", 
                            "text_range": {
                              "start_line": 333, 
                              "end_line": 335, 
                              "start_column": 3, 
                              "end_column": 28
                            }
                          }, 
                          {
                            "modifiers": {}, 
                            "type": 8, 
                            "name": "~SyncRegistrationOptions", 
                            "text_range": {
                              "start_line": 337, 
                              "end_line": 337, 
                              "start_column": 3, 
                              "end_column": 29
                            }
                          }, 
                          {
                            "modifiers": {}, 
                            "type": 8, 
                            "name": "Clone", 
                            "text_range": {
                              "start_line": 343, 
                              "end_line": 343, 
                              "start_column": 3, 
                              "end_column": 43
                            }
                          }, 
                          {
                            "modifiers": {}, 
                            "type": 8, 
                            "name": "Equals", 
                            "text_range": {
                              "start_line": 351, 
                              "end_line": 351, 
                              "start_column": 3, 
                              "end_column": 36
                            }
                          }, 
                          {
                            "modifiers": {}, 
                            "type": 8, 
                            "name": "size_t", 
                            "text_range": {
                              "start_line": 352, 
                              "end_line": 352, 
                              "start_column": 3, 
                              "end_column": 33
                            }
                          }, 
                          {
                            "modifiers": {}, 
                            "type": 8, 
                            "name": "Serialize", 
                            "text_range": {
                              "start_line": 355, 
                              "end_line": 358, 
                              "start_column": 3, 
                              "end_column": 4
                            }
                          }, 
                          {
                            "modifiers": {}, 
                            "type": 8, 
                            "name": "SerializeAsMessage", 
                            "text_range": {
                              "start_line": 361, 
                              "end_line": 364, 
                              "start_column": 3, 
                              "end_column": 4
                            }
                          }, 
                          {
                            "modifiers": {}, 
                            "type": 8, 
                            "name": "WrapAsMessage", 
                            "text_range": {
                              "start_line": 371, 
                              "end_line": 375, 
                              "start_column": 3, 
                              "end_column": 4
                            }
                          }, 
                          {
                            "modifiers": {}, 
                            "type": 8, 
                            "name": "Deserialize", 
                            "text_range": {
                              "start_line": 378, 
                              "end_line": 383, 
                              "start_column": 3, 
                              "end_column": 4
                            }
                          }, 
                          {
                            "modifiers": {}, 
                            "type": 8, 
                            "name": "Deserialize", 
                            "text_range": {
                              "start_line": 386, 
                              "end_line": 390, 
                              "start_column": 3, 
                              "end_column": 4
                            }
                          }, 
                          {
                            "modifiers": {}, 
                            "type": 8, 
                            "name": "DeserializeFromMessage", 
                            "text_range": {
                              "start_line": 393, 
                              "end_line": 406, 
                              "start_column": 3, 
                              "end_column": 4
                            }, 
                            "child": [
                              {
                                "modifiers": {}, 
                                "type": 9, 
                                "name": "context", 
                                "text_range": {
                                  "start_line": 395, 
                                  "end_line": 397, 
                                  "start_column": 5, 
                                  "end_column": 60
                                }
                              }
                            ]
                          }, 
                          {
                            "modifiers": {}, 
                            "type": 9, 
                            "name": "tag", 
                            "text_range": {
                              "start_line": 410, 
                              "end_line": 410, 
                              "start_column": 3, 
                              "end_column": 18
                            }
                          }, 
                          {
                            "modifiers": {}, 
                            "type": 9, 
                            "name": "int64_t", 
                            "text_range": {
                              "start_line": 413, 
                              "end_line": 413, 
                              "start_column": 3, 
                              "end_column": 23
                            }
                          }, 
                          {
                            "modifiers": {}, 
                            "type": 8, 
                            "name": "Validate", 
                            "text_range": {
                              "start_line": 416, 
                              "end_line": 417, 
                              "start_column": 3, 
                              "end_column": 78
                            }
                          }
                        ]
                      }, 
                      {
                        "modifiers": {}, 
                        "type": 1, 
                        "name": "PLATFORM_EXPORT BackgroundSyncRegistrationInfo", 
                        "text_range": {
                          "start_line": 425, 
                          "end_line": 538, 
                          "start_column": 1, 
                          "end_column": 2
                        }, 
                        "child": [
                          {
                            "modifiers": {}, 
                            "type": 8, 
                            "name": "New", 
                            "text_range": {
                              "start_line": 431, 
                              "end_line": 434, 
                              "start_column": 3, 
                              "end_column": 4
                            }
                          }, 
                          {
                            "modifiers": {}, 
                            "type": 8, 
                            "name": "From", 
                            "text_range": {
                              "start_line": 437, 
                              "end_line": 439, 
                              "start_column": 3, 
                              "end_column": 4
                            }
                          }, 
                          {
                            "modifiers": {}, 
                            "type": 8, 
                            "name": "To", 
                            "text_range": {
                              "start_line": 442, 
                              "end_line": 444, 
                              "start_column": 3, 
                              "end_column": 4
                            }
                          }, 
                          {
                            "modifiers": {}, 
                            "type": 8, 
                            "name": "BackgroundSyncRegistrationInfo", 
                            "text_range": {
                              "start_line": 447, 
                              "end_line": 447, 
                              "start_column": 3, 
                              "end_column": 35
                            }
                          }, 
                          {
                            "modifiers": {}, 
                            "type": 8, 
                            "name": "BackgroundSyncRegistrationInfo", 
                            "text_range": {
                              "start_line": 449, 
                              "end_line": 452, 
                              "start_column": 3, 
                              "end_column": 36
                            }
                          }, 
                          {
                            "modifiers": {}, 
                            "type": 8, 
                            "name": "~BackgroundSyncRegistrationInfo", 
                            "text_range": {
                              "start_line": 454, 
                              "end_line": 454, 
                              "start_column": 3, 
                              "end_column": 36
                            }
                          }, 
                          {
                            "modifiers": {}, 
                            "type": 8, 
                            "name": "Clone", 
                            "text_range": {
                              "start_line": 460, 
                              "end_line": 460, 
                              "start_column": 3, 
                              "end_column": 50
                            }
                          }, 
                          {
                            "modifiers": {}, 
                            "type": 8, 
                            "name": "Equals", 
                            "text_range": {
                              "start_line": 468, 
                              "end_line": 468, 
                              "start_column": 3, 
                              "end_column": 36
                            }
                          }, 
                          {
                            "modifiers": {}, 
                            "type": 8, 
                            "name": "size_t", 
                            "text_range": {
                              "start_line": 469, 
                              "end_line": 469, 
                              "start_column": 3, 
                              "end_column": 33
                            }
                          }, 
                          {
                            "modifiers": {}, 
                            "type": 8, 
                            "name": "Serialize", 
                            "text_range": {
                              "start_line": 472, 
                              "end_line": 475, 
                              "start_column": 3, 
                              "end_column": 4
                            }
                          }, 
                          {
                            "modifiers": {}, 
                            "type": 8, 
                            "name": "SerializeAsMessage", 
                            "text_range": {
                              "start_line": 478, 
                              "end_line": 481, 
                              "start_column": 3, 
                              "end_column": 4
                            }
                          }, 
                          {
                            "modifiers": {}, 
                            "type": 8, 
                            "name": "WrapAsMessage", 
                            "text_range": {
                              "start_line": 488, 
                              "end_line": 492, 
                              "start_column": 3, 
                              "end_column": 4
                            }
                          }, 
                          {
                            "modifiers": {}, 
                            "type": 8, 
                            "name": "Deserialize", 
                            "text_range": {
                              "start_line": 495, 
                              "end_line": 500, 
                              "start_column": 3, 
                              "end_column": 4
                            }
                          }, 
                          {
                            "modifiers": {}, 
                            "type": 8, 
                            "name": "Deserialize", 
                            "text_range": {
                              "start_line": 503, 
                              "end_line": 507, 
                              "start_column": 3, 
                              "end_column": 4
                            }
                          }, 
                          {
                            "modifiers": {}, 
                            "type": 8, 
                            "name": "DeserializeFromMessage", 
                            "text_range": {
                              "start_line": 510, 
                              "end_line": 523, 
                              "start_column": 3, 
                              "end_column": 4
                            }, 
                            "child": [
                              {
                                "modifiers": {}, 
                                "type": 9, 
                                "name": "context", 
                                "text_range": {
                                  "start_line": 512, 
                                  "end_line": 514, 
                                  "start_column": 5, 
                                  "end_column": 67
                                }
                              }
                            ]
                          }, 
                          {
                            "modifiers": {}, 
                            "type": 9, 
                            "name": "int64_t", 
                            "text_range": {
                              "start_line": 527, 
                              "end_line": 527, 
                              "start_column": 3, 
                              "end_column": 41
                            }
                          }, 
                          {
                            "modifiers": {}, 
                            "type": 9, 
                            "name": "tag", 
                            "text_range": {
                              "start_line": 530, 
                              "end_line": 530, 
                              "start_column": 3, 
                              "end_column": 18
                            }
                          }, 
                          {
                            "modifiers": {}, 
                            "type": 9, 
                            "name": "BackgroundSyncType", 
                            "text_range": {
                              "start_line": 533, 
                              "end_line": 533, 
                              "start_column": 3, 
                              "end_column": 31
                            }
                          }, 
                          {
                            "modifiers": {}, 
                            "type": 8, 
                            "name": "Validate", 
                            "text_range": {
                              "start_line": 536, 
                              "end_line": 537, 
                              "start_column": 3, 
                              "end_column": 78
                            }
                          }
                        ]
                      }, 
                      {
                        "modifiers": {}, 
                        "type": 8, 
                        "name": "SyncRegistrationOptions::Clone", 
                        "text_range": {
                          "start_line": 545, 
                          "end_line": 550, 
                          "start_column": 1, 
                          "end_column": 2
                        }
                      }, 
                      {
                        "modifiers": {}, 
                        "type": 8, 
                        "name": "SyncRegistrationOptions::Equals", 
                        "text_range": {
                          "start_line": 555, 
                          "end_line": 561, 
                          "start_column": 1, 
                          "end_column": 2
                        }
                      }, 
                      {
                        "modifiers": {}, 
                        "type": 8, 
                        "name": "BackgroundSyncRegistrationInfo::Clone", 
                        "text_range": {
                          "start_line": 563, 
                          "end_line": 569, 
                          "start_column": 1, 
                          "end_column": 2
                        }
                      }, 
                      {
                        "modifiers": {}, 
                        "type": 8, 
                        "name": "BackgroundSyncRegistrationInfo::Equals", 
                        "text_range": {
                          "start_line": 574, 
                          "end_line": 582, 
                          "start_column": 1, 
                          "end_column": 2
                        }
                      }
                    ]
                  }
                ]
              }
            ]
          }, 
          {
            "modifiers": {}, 
            "type": 11, 
            "name": "mojo", 
            "text_range": {
              "start_line": 589, 
              "end_line": 636, 
              "start_column": 1, 
              "end_column": 2
            }, 
            "child": [
              {
                "modifiers": {}, 
                "type": 3, 
                "name": "PLATFORM_EXPORT StructTraits", 
                "text_range": {
                  "start_line": 592, 
                  "end_line": 609, 
                  "start_column": 1, 
                  "end_column": 2
                }, 
                "child": [
                  {
                    "modifiers": {}, 
                    "type": 8, 
                    "name": "IsNull", 
                    "text_range": {
                      "start_line": 595, 
                      "end_line": 595, 
                      "start_column": 3, 
                      "end_column": 104
                    }
                  }, 
                  {
                    "modifiers": {}, 
                    "type": 8, 
                    "name": "SetToNull", 
                    "text_range": {
                      "start_line": 596, 
                      "end_line": 596, 
                      "start_column": 3, 
                      "end_column": 104
                    }
                  }, 
                  {
                    "modifiers": {}, 
                    "type": 8, 
                    "name": "min_interval", 
                    "text_range": {
                      "start_line": 603, 
                      "end_line": 606, 
                      "start_column": 3, 
                      "end_column": 4
                    }
                  }, 
                  {
                    "modifiers": {}, 
                    "type": 8, 
                    "name": "Read", 
                    "text_range": {
                      "start_line": 608, 
                      "end_line": 608, 
                      "start_column": 3, 
                      "end_column": 142
                    }
                  }
                ]
              }, 
              {
                "modifiers": {}, 
                "type": 3, 
                "name": "PLATFORM_EXPORT StructTraits", 
                "text_range": {
                  "start_line": 612, 
                  "end_line": 634, 
                  "start_column": 1, 
                  "end_column": 2
                }, 
                "child": [
                  {
                    "modifiers": {}, 
                    "type": 8, 
                    "name": "IsNull", 
                    "text_range": {
                      "start_line": 615, 
                      "end_line": 615, 
                      "start_column": 3, 
                      "end_column": 111
                    }
                  }, 
                  {
                    "modifiers": {}, 
                    "type": 8, 
                    "name": "SetToNull", 
                    "text_range": {
                      "start_line": 616, 
                      "end_line": 616, 
                      "start_column": 3, 
                      "end_column": 111
                    }
                  }, 
                  {
                    "modifiers": {}, 
                    "type": 8, 
                    "name": "service_worker_registration_id", 
                    "text_range": {
                      "start_line": 618, 
                      "end_line": 621, 
                      "start_column": 3, 
                      "end_column": 4
                    }
                  }, 
                  {
                    "modifiers": {}, 
                    "type": 8, 
                    "name": "sync_type", 
                    "text_range": {
                      "start_line": 628, 
                      "end_line": 631, 
                      "start_column": 3, 
                      "end_column": 4
                    }
                  }, 
                  {
                    "modifiers": {}, 
                    "type": 8, 
                    "name": "Read", 
                    "text_range": {
                      "start_line": 633, 
                      "end_line": 633, 
                      "start_column": 3, 
                      "end_column": 156
                    }
                  }
                ]
              }
            ]
          }
        ]
      }, 
      "return_code": 1
    }
  ]
}